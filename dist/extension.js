"use strict";var $=Object.create;var B=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var U=Object.getOwnPropertyNames;var V=Object.getPrototypeOf,X=Object.prototype.hasOwnProperty;var H=(o,s)=>{for(var h in s)B(o,h,{get:s[h],enumerable:!0})},L=(o,s,h,C)=>{if(s&&typeof s=="object"||typeof s=="function")for(let S of U(s))!X.call(o,S)&&S!==h&&B(o,S,{get:()=>s[S],enumerable:!(C=O(s,S))||C.enumerable});return o};var x=(o,s,h)=>(h=o!=null?$(V(o)):{},L(s||!o||!o.__esModule?B(h,"default",{value:o,enumerable:!0}):h,o)),W=o=>L(B({},"__esModule",{value:!0}),o);var Q={};H(Q,{activate:()=>J,deactivate:()=>j});module.exports=W(Q);var e=x(require("vscode")),b=x(require("crypto")),E=x(require("path"));var R=["Node","Node3D","Node2D","AcceptDialog","AnimatableBody2D","AnimatableBody3D","AnimatedSprite2D","AnimatedSprite3D","AnimationMixer","AnimationPlayer","AnimationTree","Area2D","Area3D","AspectRatioContainer","AudioListener2D","AudioListener3D","AudioStreamPlayer","AudioStreamPlayer2D","AudioStreamPlayer3D","BackBufferCopy","BaseButton","Bone2D","BoneAttachment3D","BoxContainer","Button","Camera2D","Camera3D","CanvasGroup","CanvasItem","CanvasLayer","CanvasModulate","CenterContainer","CharacterBody2D","CharacterBody3D","CheckBox","CheckButton","CodeEdit","CollisionObject2D","CollisionObject3D","CollisionPolygon2D","CollisionPolygon3D","CollisionShape2D","CollisionShape3D","ColorPicker","ColorPickerButton","ColorRect","ConeTwistJoint3D","ConfirmationDialog","Container","Control","CPUParticles2D","CPUParticles3D","CSGBox3D","CSGCombiner3D","CSGCylinder3D","CSGMesh3D","CSGPolygon3D","CSGPrimitive3D","CSGShape3D","CSGSphere3D","CSGTorus3D","DampedSpringJoint2D","Decal","DirectionalLight2D","DirectionalLight3D","EditorCommandPalette","EditorFileDialog","EditorFileSystem","EditorInspector","EditorPlugin","EditorProperty","EditorResourcePicker","EditorResourcePreview","EditorScriptPicker","EditorSpinSlider","EditorToaster","FileDialog","FileSystemDock","FlowContainer","FogVolume","Generic6DOFJoint3D","GeometryInstance3D","GPUParticles2D","GPUParticles3D","GPUParticlesAttractor3D","GPUParticlesAttractorBox3D","GPUParticlesAttractorSphere3D","GPUParticlesAttractorVectorField3D","GPUParticlesCollision3D","GPUParticlesCollisionBox3D","GPUParticlesCollisionHeightField3D","GPUParticlesCollisionSDF3D","GPUParticlesCollisionSphere3D","GraphEdit","GraphElement","GraphFrame","GraphNode","GridContainer","GridMap","GridMapEditorPlugin","GrooveJoint2D","HBoxContainer","HFlowContainer","HingeJoint3D","HScrollBar","HSeparator","HSlider","HSplitContainer","HTTPRequest","ImporterMeshInstance3D","InstancePlaceholder","ItemList","Joint2D","Joint3D","Label","Label3D","Light2D","Light3D","LightmapGI","LightmapProbe","LightOccluder2D","Line2D","LineEdit","LinkButton","LookAtModifier3D","MarginContainer","Marker2D","Marker3D","MenuBar","MenuButton","MeshInstance2D","MeshInstance3D","MissingNode","MultiMeshInstance2D","MultiMeshInstance3D","MultiplayerSpawner","MultiplayerSynchronizer","NavigationAgent2D","NavigationAgent3D","NavigationLink2D","NavigationLink3D","NavigationObstacle2D","NavigationObstacle3D","NavigationRegion2D","NavigationRegion3D","NinePatchRect","Node2D","Node3D","OccluderInstance3D","OmniLight3D","OpenXRBindingModifierEditor","OpenXRCompositionLayer","OpenXRCompositionLayerCylinder","OpenXRCompositionLayerEquirect","OpenXRCompositionLayerQuad","OpenXRHand","OpenXRInteractionProfileEditor","OpenXRInteractionProfileEditorBase","OpenXRVisibilityMask","OptionButton","Panel","PanelContainer","Parallax2D","ParallaxBackground","ParallaxLayer","Path2D","Path3D","PathFollow2D","PathFollow3D","PhysicalBone2D","PhysicalBone3D","PhysicalBoneSimulator3D","PhysicsBody2D","PhysicsBody3D","PinJoint2D","PinJoint3D","PointLight2D","Polygon2D","Popup","PopupMenu","PopupPanel","ProgressBar","Range","RayCast2D","RayCast3D","ReferenceRect","ReflectionProbe","RemoteTransform2D","RemoteTransform3D","ResourcePreloader","RetargetModifier3D","RichTextLabel","RigidBody2D","RigidBody3D","RootMotionView","ScriptCreateDialog","ScriptEditor","ScriptEditorBase","ScrollBar","ScrollContainer","Separator","ShaderGlobalsOverride","ShapeCast2D","ShapeCast3D","Skeleton2D","Skeleton3D","SkeletonIK3D","SkeletonModifier3D","Slider","SliderJoint3D","SoftBody3D","SpinBox","SplitContainer","SpotLight3D","SpringArm3D","SpringBoneCollision3D","SpringBoneCollisionCapsule3D","SpringBoneCollisionPlane3D","SpringBoneCollisionSphere3D","SpringBoneSimulator3D","Sprite2D","Sprite3D","SpriteBase3D","StaticBody2D","StaticBody3D","StatusIndicator","SubViewport","SubViewportContainer","TabBar","TabContainer","TextEdit","TextureButton","TextureProgressBar","TextureRect","TileMap","TileMapLayer","Timer","TouchScreenButton","Tree","VBoxContainer","VehicleBody3D","VehicleWheel3D","VFlowContainer","VideoStreamPlayer","Viewport","VisibleOnScreenEnabler2D","VisibleOnScreenEnabler3D","VisibleOnScreenNotifier2D","VisibleOnScreenNotifier3D","VisualInstance3D","VoxelGI","VScrollBar","VSeparator","VSlider","VSplitContainer","Window","WorldEnvironment","XRAnchor3D","XRBodyModifier3D","XRCamera3D","XRController3D","XRFaceModifier3D","XRHandModifier3D","XRNode3D","XROrigin3D"];function J(o){let s=e.commands.registerCommand("gd-creation.createGodotFile",async g=>{let c=g.fsPath,n=await e.window.showInputBox({prompt:"Enter the name of the new Godot script file (without .gd)",value:"NewScript",validateInput:D=>D.trim()?/[\/:*?"<>|]/.test(D)?"Invalid characters in filename":null:"Filename cannot be empty"});if(!n)return;let i=n.endsWith(".gd")?n:`${n}.gd`,t=await e.window.showQuickPick(R,{title:"Select base class (extends)",placeHolder:"Node3D"})||"Node3D",l=E.join(c,i),a=`${l}.uid`,p=e.Uri.file(l),w=e.Uri.file(a),d=M();try{let D=`extends ${t}
`;await e.workspace.fs.writeFile(p,new TextEncoder().encode(D));let r=`uid://${d}`;await e.workspace.fs.writeFile(w,new TextEncoder().encode(r)),e.window.showInformationMessage(`Created: ${i} with extends ${t}`)}catch(D){e.window.showErrorMessage(`Error creating files: ${D}`)}});o.subscriptions.push(s);let h=e.commands.registerCommand("gd-creation.attachScriptToScene",async g=>{let c=await e.workspace.findFiles("**/*.gd","**/node_modules/**",200);if(c.length===0){e.window.showWarningMessage(".gd scripts not found");return}let n=await e.window.showQuickPick(c.map(u=>({label:e.workspace.asRelativePath(u),description:u.fsPath,uri:u})),{title:"Select script to attach"});if(!n)return;let i=await e.workspace.openTextDocument(g),m=i.getText(),t=m.split(`
`),l=[],a=null,p=!1;for(let u=0;u<t.length;u++){let N=t[u],G=N.match(/^\[node name=\"([^\"]+)\"/);if(G){a&&!p&&l.push(a),a=G[1],p=!1;continue}a&&N.includes("script = ExtResource")&&(p=!0)}if(a&&!p&&l.push(a),l.length===0){e.window.showWarningMessage("No nodes without attached scripts found.");return}let w=await e.window.showQuickPick(l,{title:"Select node to attach script to"});if(!w)return;let d=e.workspace.asRelativePath(n.uri).replace(/\\/g,"/"),D=M(),r=`1_${D.slice(0,5)}`,v=`[ext_resource type="Script" uid="uid://${D}" path="res://${d}" id="${r}"]`,f=`script = ExtResource("${r}")`;if(m.includes(`path="res://${d}"`)){e.window.showWarningMessage("This script is already attached.");return}let y=t.findIndex(u=>u.startsWith("[ext_resource"))+1||1;t.splice(y,0,v);let A=`[node name="${w}"`,I=t.findIndex(u=>u.trim().startsWith(A));if(I===-1){e.window.showErrorMessage(`Node named "${w}" not found in scene.`);return}let P=I+1;for(;P<t.length&&!t[P].startsWith("[");)P++;t[P-1].trim()!==""?t.splice(P,0,f):t[P-1]=f;let T=t.join(`
`),k=new e.WorkspaceEdit,F=new e.Range(i.positionAt(0),i.positionAt(m.length));k.replace(g,F,T),await e.workspace.applyEdit(k),await i.save(),e.window.showInformationMessage(`Script successfully attached to node "${w}".`)});o.subscriptions.push(h);let C=e.commands.registerCommand("gd-creation.createGodotScene",async g=>{let c=g.fsPath,n=await e.window.showInputBox({prompt:"Enter the name of the new scene (without .tscn)",value:"NewScene",validateInput:d=>d.trim()?/[\/:*?"<>|]/.test(d)?"Invalid characters in scene name":null:"Scene name cannot be empty"});if(!n)return;let i=n.endsWith(".tscn")?n:`${n}.tscn`,t=await e.window.showQuickPick(R,{title:"Select root node type",placeHolder:"Node3D"})||"Node3D",a=`[gd_scene format=3 uid="uid://${M()}"]

[node name="${n}" type="${t}"]
`,p=E.join(c,i),w=e.Uri.file(p);try{await e.workspace.fs.writeFile(w,new TextEncoder().encode(a)),e.window.showInformationMessage(`Scene created: ${i} with root node ${t}`)}catch(d){e.window.showErrorMessage(`Error creating scene: ${d}`)}});o.subscriptions.push(C);let S=e.commands.registerCommand("gd-creation.detachScriptFromScene",async g=>{try{let c=await e.workspace.openTextDocument(g),n=c.getText(),i=n.split(`
`),m=[],t="";for(let r=0;r<i.length;r++){let v=i[r],f=v.match(/^\[node name=\"([^\"]+)\"/);f&&(t=f[1]);let y=v.match(/script = ExtResource\(\"([^\"]+)\"\)/);y&&t&&m.push({nodeName:t,scriptLineIndex:r,extResourceId:y[1]})}if(m.length===0){e.window.showInformationMessage("No scripts found for detachment.");return}let l=await e.window.showQuickPick(m.map(r=>({label:r.nodeName,description:r.extResourceId})),{title:"Select node to detach script from"});if(!l)return;let a=m.find(r=>r.nodeName===l.label);if(!a)return;i.splice(a.scriptLineIndex,1);let p=i.findIndex(r=>r.includes(`id="${a.extResourceId}"`));p!==-1&&i.splice(p,1);let w=i.join(`
`),d=new e.WorkspaceEdit,D=new e.Range(c.positionAt(0),c.positionAt(n.length));d.replace(g,D,w),await e.workspace.applyEdit(d),await c.save(),e.window.showInformationMessage(`Script detached from node "${a.nodeName}".`)}catch(c){e.window.showErrorMessage(`Error detaching script: ${c}`)}});o.subscriptions.push(S)}function j(){}function M(){return b.randomBytes(9).toString("base64url")}0&&(module.exports={activate,deactivate});
